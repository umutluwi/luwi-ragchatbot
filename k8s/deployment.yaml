# RAG Chatbot Kubernetes Deployment
---
apiVersion: v1
kind: Namespace
metadata:
  name: rag-chatbot
---
# PostgreSQL StatefulSet with PgVector
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: rag-chatbot
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: pgvector/pgvector:pg15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: rag_chatbot
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: rag-chatbot
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# PgBouncer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: rag-chatbot
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - name: pgbouncer
        image: pgbouncer/pgbouncer:latest
        ports:
        - containerPort: 6432
        env:
        - name: DATABASES_HOST
          value: postgres
        - name: DATABASES_PORT
          value: "5432"
        - name: DATABASES_DATABASE
          value: rag_chatbot
        - name: DATABASES_USER
          value: postgres
        - name: DATABASES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: pgbouncer-config
          mountPath: /etc/pgbouncer
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
      volumes:
      - name: pgbouncer-config
        configMap:
          name: pgbouncer-config
---
# PgBouncer Service
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: rag-chatbot
spec:
  selector:
    app: pgbouncer
  ports:
  - port: 6432
    targetPort: 6432
  type: ClusterIP
---
# n8n Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: rag-chatbot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: n8n
  template:
    metadata:
      labels:
        app: n8n
    spec:
      containers:
      - name: n8n
        image: n8nio/n8n:latest
        ports:
        - containerPort: 5678
        env:
        - name: N8N_HOST
          value: n8n.luwi.dev
        - name: N8N_PORT
          value: "5678"
        - name: N8N_PROTOCOL
          value: https
        - name: NODE_ENV
          value: production
        - name: WEBHOOK_URL
          value: https://n8n.luwi.dev/
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: n8n-secret
              key: encryption-key
        - name: DB_TYPE
          value: postgresdb
        - name: DB_POSTGRESDB_HOST
          value: pgbouncer
        - name: DB_POSTGRESDB_PORT
          value: "6432"
        - name: DB_POSTGRESDB_DATABASE
          value: n8n
        - name: DB_POSTGRESDB_USER
          value: n8n
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n8n-secret
              key: db-password
        volumeMounts:
        - name: n8n-data
          mountPath: /home/node/.n8n
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
      volumes:
      - name: n8n-data
        persistentVolumeClaim:
          claimName: n8n-data-pvc
---
# n8n Service
apiVersion: v1
kind: Service
metadata:
  name: n8n
  namespace: rag-chatbot
spec:
  selector:
    app: n8n
  ports:
  - port: 5678
    targetPort: 5678
  type: ClusterIP
---
# Redis Deployment for Rate Limiting
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rag-chatbot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: rag-chatbot
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Streaming Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streaming-server
  namespace: rag-chatbot
spec:
  replicas: 3
  selector:
    matchLabels:
      app: streaming-server
  template:
    metadata:
      labels:
        app: streaming-server
    spec:
      containers:
      - name: streaming-server
        image: rag-chatbot/streaming-server:latest
        ports:
        - containerPort: 3001
        env:
        - name: PORT
          value: "3001"
        - name: N8N_WEBHOOK_URL
          value: http://n8n:5678/webhook
        - name: WEBHOOK_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: webhook-key
        - name: FRONTEND_URL
          value: https://chat.luwi.dev
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "1000m"
---
# Streaming Server Service
apiVersion: v1
kind: Service
metadata:
  name: streaming-server
  namespace: rag-chatbot
spec:
  selector:
    app: streaming-server
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP
---
# Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rag-chatbot-ingress
  namespace: rag-chatbot
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/websocket-services: streaming-server
    nginx.ingress.kubernetes.io/rate-limit: "10"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - n8n.luwi.dev
    - chat.luwi.dev
    - api.luwi.dev
    secretName: rag-chatbot-tls
  rules:
  - host: n8n.luwi.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: n8n
            port:
              number: 5678
  - host: api.luwi.dev
    http:
      paths:
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: streaming-server
            port:
              number: 3001
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: streaming-server
            port:
              number: 3001
---
# HorizontalPodAutoscaler for Streaming Server
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: streaming-server-hpa
  namespace: rag-chatbot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: streaming-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80